[{"D:\\Storage\\portfolio\\src\\index.js":"1","D:\\Storage\\portfolio\\src\\reportWebVitals.js":"2","D:\\Storage\\portfolio\\src\\App.js":"3","D:\\Storage\\portfolio\\src\\Redux\\reducer.js":"4","D:\\Storage\\portfolio\\src\\Components\\ProductInfo.js":"5","D:\\Storage\\portfolio\\src\\Sections\\Skeleton.js":"6","D:\\Storage\\portfolio\\src\\Sections\\Header.js":"7","D:\\Storage\\portfolio\\src\\Sections\\UAssist.js":"8","D:\\Storage\\portfolio\\src\\Sections\\Contact.js":"9","D:\\Storage\\portfolio\\src\\Sections\\Expcon.js":"10","D:\\Storage\\portfolio\\src\\Sections\\About.js":"11","D:\\Storage\\portfolio\\src\\Sections\\SideNav.js":"12","D:\\Storage\\portfolio\\src\\Sections\\Landing.js":"13","D:\\Storage\\portfolio\\src\\Redux\\reducers\\propertyReducer.js":"14","D:\\Storage\\portfolio\\src\\Components\\MobileContent.js":"15","D:\\Storage\\portfolio\\src\\Components\\AboutMe.js":"16","D:\\Storage\\portfolio\\src\\Redux\\actions\\propertyAction.js":"17","D:\\Storage\\portfolio\\src\\Components\\Bars.js":"18","D:\\Storage\\portfolio\\src\\Components\\WorkValues.js":"19","D:\\Storage\\portfolio\\src\\Sections\\MyHealthy.js":"20","D:\\Storage\\portfolio\\src\\Assets\\constants.js":"21"},{"size":517,"mtime":1615860854337,"results":"22","hashOfConfig":"23"},{"size":375,"mtime":1615860854338,"results":"24","hashOfConfig":"23"},{"size":1716,"mtime":1615860853122,"results":"25","hashOfConfig":"23"},{"size":193,"mtime":1615860854322,"results":"26","hashOfConfig":"23"},{"size":32371,"mtime":1615936830057,"results":"27","hashOfConfig":"23"},{"size":25391,"mtime":1615919747623,"results":"28","hashOfConfig":"23"},{"size":3405,"mtime":1615860854329,"results":"29","hashOfConfig":"23"},{"size":11961,"mtime":1615936035636,"results":"30","hashOfConfig":"23"},{"size":8020,"mtime":1615919822668,"results":"31","hashOfConfig":"23"},{"size":12059,"mtime":1615935979189,"results":"32","hashOfConfig":"23"},{"size":9959,"mtime":1615860854326,"results":"33","hashOfConfig":"23"},{"size":16706,"mtime":1615920476149,"results":"34","hashOfConfig":"23"},{"size":26686,"mtime":1615860854331,"results":"35","hashOfConfig":"23"},{"size":326,"mtime":1615860854324,"results":"36","hashOfConfig":"23"},{"size":6869,"mtime":1615860854312,"results":"37","hashOfConfig":"23"},{"size":47977,"mtime":1615860854307,"results":"38","hashOfConfig":"23"},{"size":148,"mtime":1615860854321,"results":"39","hashOfConfig":"23"},{"size":4821,"mtime":1615860854310,"results":"40","hashOfConfig":"23"},{"size":2591,"mtime":1615860854318,"results":"41","hashOfConfig":"23"},{"size":12209,"mtime":1615940767430,"results":"42","hashOfConfig":"23"},{"size":6180,"mtime":1615919106543,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1gxm1sb",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"46"},"D:\\Storage\\portfolio\\src\\index.js",[],["96","97"],"D:\\Storage\\portfolio\\src\\reportWebVitals.js",[],"D:\\Storage\\portfolio\\src\\App.js",[],"D:\\Storage\\portfolio\\src\\Redux\\reducer.js",[],"D:\\Storage\\portfolio\\src\\Components\\ProductInfo.js",["98","99","100","101","102","103","104","105"],"D:\\Storage\\portfolio\\src\\Sections\\Skeleton.js",[],"D:\\Storage\\portfolio\\src\\Sections\\Header.js",["106","107"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { animated, useSpring } from 'react-spring';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport UseAnimations from 'react-useanimations';\r\nimport github from 'react-useanimations/lib/github';\r\nimport linkedin from 'react-useanimations/lib/linkedin';\r\nimport mail from 'react-useanimations/lib/mail';\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nconst Header = (props) => {\r\n\r\n    const matches = useMediaQuery('(min-width:1200px)', { noSsr: true });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {matches ?\r\n                <div style={{ position: \"fixed\", padding: \"40px\", zIndex: 2000, display: \"flex\", width: \"100%\", boxSizing: \"border-box\", justifyContent: \"space-between\" }\r\n                } >\r\n                    <div onClick={() => { window.location.reload(false) }}>\r\n                        <Typography\r\n                            style={{\r\n                                width: \"max-content\", color: \"white\", fontFamily: \"FuturaB\", fontSize: \"14px\", letterSpacing: \"3px\",\r\n                                marginTop: \"2px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\", cursor: \"pointer\"\r\n                            }}>\r\n                            Kento Kobayashi\r\n                    </Typography>\r\n                    </div>\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <div style={{ cursor: \"pointer\", marginRight: \"1.1rem\" }} onClick={() => { window.open(\"https://github.com/kobayashikento\") }}>\r\n                            <UseAnimations animation={github} loop={true} strokeColor=\"white\" size={28} />\r\n                        </div>\r\n                        <div style={{ cursor: \"pointer\", marginRight: \"1.1rem\" }} onClick={() => { window.open(\"https://ca.linkedin.com/in/kento-kobayashi-1a7330120\") }}>\r\n                            <UseAnimations animation={linkedin} loop={true} strokeColor=\"white\" size={28} />\r\n                        </div>\r\n                        <div style={{ cursor: \"pointer\", marginRight: \"2.2rem\" }} onClick={() => { window.location.href = \"mailto:kentokobayashik@gmail.com?\" }} >\r\n                            <UseAnimations animation={mail} autplay=\"true\" strokeColor=\"white\" size={28} />\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n                :\r\n                <div style={{ position: \"fixed\", zIndex: 2000, display: props.modalOpen ? \"none\" : \"flex\", width: \"100%\", boxSizing: \"border-box\", justifyContent: \"space-between\" }}>\r\n                    <div onClick={() => { window.location.reload(false) }}>\r\n                        <Typography\r\n                            style={{\r\n                                width: \"max-content\", color: \"white\", fontFamily: \"FuturaB\", fontSize: \"14px\", letterSpacing: \"3px\", marginLeft: \"3.3vmax\",\r\n                                marginTop: \"5.5vmax\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\", cursor: \"pointer\"\r\n                            }}>\r\n                            Kento Kobayashi\r\n                </Typography>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        modalOpen: state.propertyReducer.modalOpen,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header)","D:\\Storage\\portfolio\\src\\Sections\\UAssist.js",["108","109"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport ProductInfo from '../Components/ProductInfo';\r\n\r\n//Photo by AltumCode on Unsplash\r\nimport uassistPic from '../Assets/pictures/uassist_pic.png';\r\nimport uassistClearPic from '../Assets/pictures/uassist_clean.png';\r\n\r\nimport * as easings from 'd3-ease';\r\n\r\nimport uaMainPic from '../Assets/pictures/ua_main_pic.png';\r\nimport uaAllPic from '../Assets/pictures/ua_all_pic.png';\r\n\r\nimport MobileContent from '../Components/MobileContent';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setModalOpen } from '../Redux/actions/propertyAction';\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nconst content = {\r\n    mockOverview: uaMainPic, dutiesText: [\"full-stack /\", \"developer\"], techText: [\"MongoDB\", \"Express\", \"JavaScript\", \"Bootstrap\"],\r\n    dateText: \"Dec, 2019\", overviewText: \"A website that focuses on Rest API design and data management using MongoDB.\",\r\n    mockAll: uaAllPic, detailsText: \"This website was built during my Web Development course at U of T with a team of 2 other students. The focus of this project was more towards the back-end implementation using MongoDB and expressJS via NodeJS. As a team we made sure that all asynchronous calls to the backend were handled appropriately. My team and I received a 95% grade on this project.\",\r\n    longpic1: null, longpic2: null, mainPicWidth: \"65%\",\r\n    focusDevText: \"Learned about  ExpressJS, MongoDB Schema Design, NodeJS, RestAPI in lecture to create a website that makes AJAX calls to the mongoDB to retrieve appropriate JSON files. Implemented user authentication by creating user “authentication tokens” using JWT, and created hashed passwords with additional “salt” using Bcrypt.\",\r\n    focusDesignText: \"Used Bootstrap for the majority of the website and implemented modals and forms from the library to be consistent in the design.\"\r\n}\r\n\r\nconst Slide = React.forwardRef(function Slide(props, ref) {\r\n    const { in: open, children, onEnter, onExited, ...other } = props;\r\n    const style = useSpring({\r\n        from: { transform: \"translateY(0%)\" },\r\n        to: { transform: open ? \"translateY(0%)\" : \"translateY(100%)\" },\r\n        config: { duration: 400 },\r\n        onStart: () => {\r\n            if (open && onEnter) {\r\n                onEnter();\r\n            }\r\n        },\r\n        onRest: () => {\r\n            if (!open && onExited) {\r\n                onExited();\r\n            }\r\n        },\r\n    });\r\n\r\n    return (\r\n        <animated.div ref={ref} style={style} {...other}>\r\n            {children}\r\n        </animated.div>\r\n    );\r\n});\r\n\r\nconst UAssist = (props) => {\r\n\r\n    const matches = useMediaQuery('(min-width:1200px)', { noSsr: true });\r\n\r\n    const [imageHover, setImageHover] = React.useState(false);\r\n    const [uaModalOpen, setUaModalOpen] = React.useState(false);\r\n\r\n    const springFirst = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-100%)` },\r\n        from: { transform: `translateX(-100%)`, zIndex: 5 },\r\n        config: { duration: 800, easing: easings.easeCubicOut },\r\n        delay: 300\r\n    });\r\n\r\n    const springLine = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-6.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-6.5rem)`, zIndex: 5 },\r\n        delay: 300\r\n    });\r\n\r\n    const springLineMove = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-9.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-9.5rem)`, zIndex: 5 },\r\n        delay: 500\r\n    });\r\n\r\n    const springSecond = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-110%)` },\r\n        from: { transform: `translateX(-110%)`, zIndex: 5 },\r\n        delay: 600\r\n    });\r\n\r\n    const [initialRender, setInitialRender] = React.useState(true);\r\n\r\n    React.useEffect(() => {\r\n        if (props.render) {\r\n            setTimeout(() => {\r\n                setInitialRender(false);\r\n            }, 100)\r\n        } else if (!props.render) {\r\n            setInitialRender(true);\r\n        }\r\n    }, [props.render]);\r\n\r\n    const videoSpring = useSpring({\r\n        to: {\r\n            transform: props.render ? \"scale(1) translate(0%, -50%)\" : \"scale(0.6) translate(10% ,-50%)\", opacity: props.render ? 1 : 0,\r\n            height: uaModalOpen ? \"100%\" : \"70%\", width: uaModalOpen ? \"66%\" : \"54%\", right: uaModalOpen ? \"0%\" : \"8%\"\r\n        },\r\n        from: {\r\n            right: \"8%\", top: \"50%\", transform: \"scale(0.6) translate(10% ,-50%)\", transformOrigin: \"top center 20px\", opacity: 0,\r\n            height: \"70%\", width: \"54%\", zIndex: 3\r\n        },\r\n        config: { duration: uaModalOpen ? 600 : 1500, easing: easings.easePolyOut.exponent(2.04) },\r\n        delay: !initialRender ? 0 : 600\r\n    });\r\n\r\n    const videoOverlay = useSpring({\r\n        to: { width: props.render ? \"0%\" : \"100%\" },\r\n        from: { position: \"absolute\", height: \"100%\", width: \"100%\", background: \"linear-gradient(90deg, #ff4d5a 10%, #072142 20%)\", zIndex: 2, right: \"0\" },\r\n        config: { duration: 1000, easing: easings.easeQuadOut },\r\n        delay: 300\r\n    });\r\n\r\n    const springThird = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-100%)`, opacity: props.render ? 1 : 0, right: uaModalOpen ? \"3%\" : \"-6.6%\" },\r\n        from: { right: \"-6.6%\", zIndex: 5, bottom: \"8%\", position: \"absolute\", transform: `translateX(-100%)`, opacity: 0 },\r\n        delay: !initialRender ? 0 : 800\r\n    });\r\n\r\n    const imageHoverSpring = useSpring({\r\n        to: { opacity: imageHover ? 0 : 1 },\r\n        fromt: { opacity: 1 }\r\n    });\r\n\r\n    const handleClick = () => {\r\n        props.setModalOpen(true);\r\n        setUaModalOpen(true);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!props.modalOpen) {\r\n            setUaModalOpen(false);\r\n        }\r\n    }, [props.modalOpen])\r\n\r\n    const handleEscape = () => {\r\n        props.setModalOpen(false);\r\n        setUaModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", height: \"100vh\", position: \"relative\", width: \"100vw\" }}>\r\n            { matches ?\r\n                <React.Fragment>\r\n                    <animated.div style={{ overflow: \"hidden\", display: \"flex\", height: \"100%\", flexDirection: \"column\", marginLeft: \"12.2vmax\", justifyContent: \"center\", alignItems: \"flex-start\" }}>\r\n                        <animated.div style={springFirst}>\r\n                            <Typography style={{\r\n                                color: \"white\", fontFamily: \"FuturaM\", fontSize: \"5.2rem\",\r\n                                letterSpacing: \"0.5rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.3)\", fontWeight: \"bold\"\r\n                            }}>\r\n                                UAssist\r\n            </Typography>\r\n                        </animated.div>\r\n                        <div style={{ overflow: \"hidden\", marginTop: \"1%\" }}>\r\n                            <animated.div style={springLine}>\r\n                                <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"0.5rem\", marginTop: \"0.7rem\" }} />\r\n                            </animated.div>\r\n                            <animated.div style={{ ...springLineMove, marginLeft: \"3.3rem\" }}>\r\n                                <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"1.2rem\", marginTop: \"0.7rem\" }} />\r\n                            </animated.div>\r\n                        </div>\r\n                        <animated.div style={springSecond}>\r\n                            <Typography style={{\r\n                                width: \"max-content\", color: \"white\", fontFamily: \"FuturaB\", fontSize: \"1.8rem\", letterSpacing: \"0.2rem\",\r\n                                marginTop: \"4px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                            }}>\r\n                                website\r\n                </Typography>\r\n                        </animated.div>\r\n                        <animated.div style={springSecond}>\r\n                            <Typography style={{\r\n                                width: \"max-content\", color: \"rgba(255,255,255,0.7)\", fontFamily: \"'FuturaM\", fontSize: \"16px\",\r\n                                letterSpacing: \"1.5px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                            }}>\r\n                                MongoDB, Express, Bootstrap, JavaScript\r\n                </Typography>\r\n                        </animated.div>\r\n                        <animated.div style={springSecond}>\r\n                            <button onClick={() => handleClick()}\r\n                                className=\"explore\" style={{ fontFamily: \"FuturaB\", boxShadow: \"rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px\" }}>Explore<span className=\"icon-right\"></span><span className=\"icon-right after\"></span></button>\r\n                        </animated.div>\r\n                    </animated.div>\r\n                    <animated.div\r\n                        style={{\r\n                            ...videoSpring, position: \"absolute\",\r\n                            boxShadow: \"rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px\"\r\n                        }}>\r\n                        <animated.div style={videoOverlay} />\r\n                        <img src={uassistClearPic} style={{ objectFit: \"cover\", height: \"100%\", width: \"100%\", borderRadius: \"2px\", position: \"absolute\" }} />\r\n                        <animated.div style={imageHoverSpring} onMouseEnter={() => setImageHover(true)} onMouseLeave={() => setImageHover(false)}>\r\n                            <img src={uassistPic} style={{ objectFit: \"cover\",height: \"100%\", width: \"100%\", borderRadius: \"2px\", position: \"absolute\" }} />\r\n                        </animated.div>\r\n                        <animated.div style={springThird}>\r\n                            <Typography style={{\r\n                                width: \"max-content\", color: \"white\", fontFamily: \"'Abril Fatface', cursive\", fontSize: \"7rem\", textShadow: \"0 10px 30px rgb(2 11 22 / 50%)\"\r\n                            }}>\r\n                                04\r\n                </Typography>\r\n                        </animated.div>\r\n                    </animated.div>\r\n                </React.Fragment>\r\n                :\r\n                <MobileContent\r\n                    contentModalOpen={uaModalOpen}\r\n                    pic={uassistPic}\r\n                    handleClick={() => handleClick()}\r\n                    render={props.render}\r\n                    content={{ title: \"UAssist\", subtitle: \"website\", description: \"MongoDB, Express, Bootstrap, JavaScript\", number: \"03\" }}\r\n                />\r\n            }\r\n\r\n            <Modal\r\n                open={uaModalOpen}\r\n                onClose={handleEscape}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Slide in={uaModalOpen}>\r\n                    <ProductInfo\r\n                        content={content}\r\n                        picHeight={\"68%\"}\r\n                        handleEscape={() => handleEscape()}\r\n                    />\r\n                </Slide>\r\n            </Modal>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        modalOpen: state.propertyReducer.modalOpen,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setModalOpen: (boolean) => dispatch(setModalOpen(boolean))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UAssist);","D:\\Storage\\portfolio\\src\\Sections\\Contact.js",["110"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { useSpring, animated } from 'react-spring'\r\n\r\n//Photo by AltumCode on Unsplash\r\nimport torontoBack from '../Assets/pictures/toronto_back_pic.png';\r\n\r\nimport UseAnimations from 'react-useanimations';\r\nimport github from 'react-useanimations/lib/github';\r\nimport linkedin from 'react-useanimations/lib/linkedin';\r\nimport mail from 'react-useanimations/lib/mail';\r\n\r\nimport * as easings from 'd3-ease';\r\n\r\nimport MobileContent from '../Components/MobileContent';\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nconst Contact = (props) => {\r\n\r\n    const matches = useMediaQuery('(min-width:1200px)', { noSsr: true });\r\n\r\n    const springFirst = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-100%)` },\r\n        from: { transform: `translateX(-100%)`, zIndex: 5 },\r\n        config: { duration: 800, easing: easings.easeCubicOut },\r\n        delay: 300\r\n    })\r\n\r\n    const springLine = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-6.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-6.5rem)`, zIndex: 5 },\r\n        delay: 300\r\n    })\r\n\r\n    const springLineMove = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-9.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-9.5rem)`, zIndex: 5 },\r\n        delay: 500\r\n    })\r\n\r\n    const springSecond = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-110%)` },\r\n        from: { transform: `translateX(-110%)`, zIndex: 5, display: \"flex\" },\r\n        delay: 600\r\n    })\r\n\r\n    const videoSpring = useSpring({\r\n        to: { transform: props.render ? \"scale(1) translate(0%, -50%)\" : \"scale(0.7) translate(10% ,-50%)\", opacity: props.render ? 1 : 0 },\r\n        from: { right: \"8%\", top: \"50%\", transform: \"scale(0.6) translate(10% ,-50%)\", transformOrigin: \"top center 20px\", opacity: 0 },\r\n        config: { duration: 1200, easing: easings.easeQuadOut },\r\n        delay: 600\r\n    })\r\n\r\n    const videoOverlay = useSpring({\r\n        to: { width: props.render ? \"0%\" : \"100%\" },\r\n        from: { position: \"absolute\", height: \"100%\", width: \"100%\", background: \"linear-gradient(90deg, #ff4d5a 10%, #072142 20%)\", zIndex: 2, right: \"0\" },\r\n        config: { duration: 1000, easing: easings.easeQuadOut },\r\n        delay: 700\r\n    })\r\n\r\n    const springThird = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-100%)`, opacity: props.render ? 1 : 0 },\r\n        from: { right: \"-6.6%\", zIndex: 5, bottom: \"8%\", position: \"absolute\", transform: `translateX(-100%)`, opacity: 0 },\r\n        delay: 800\r\n    })\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", height: \"100vh\", position: \"relative\", width: \"100vw\" }}>\r\n            { matches ?\r\n                <React.Fragment>\r\n                    <animated.div style={{ overflow: \"hidden\", display: \"flex\", height: \"100%\", flexDirection: \"column\", marginLeft: \"12.2vmax\", justifyContent: \"center\", alignItems: \"flex-start\" }}>\r\n                        <animated.div style={springFirst}>\r\n                            <Typography style={{\r\n                                color: \"white\", fontFamily: \"FuturaM\", fontSize: \"5.2rem\",\r\n                                letterSpacing: \"0.5rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.3)\", fontWeight: \"bold\"\r\n                            }}>\r\n                                Get In Touch\r\n                </Typography>\r\n                        </animated.div>\r\n                        <div style={{ overflow: \"hidden\", marginTop: \"1%\" }}>\r\n                            <animated.div style={springLine}>\r\n                                <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"0.5rem\", marginTop: \"0.7rem\" }} />\r\n                            </animated.div>\r\n                            <animated.div style={{ ...springLineMove, marginLeft: \"3.3rem\" }}>\r\n                                <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"1.2rem\", marginTop: \"0.7rem\" }} />\r\n                            </animated.div>\r\n                        </div>\r\n                        <animated.div style={springSecond}>\r\n                            <Typography style={{\r\n                                width: \"max-content\", color: \"white\", fontFamily: \"FuturaB\", fontSize: \"1.5rem\", letterSpacing: \"0.2rem\",\r\n                                marginTop: \"4px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                            }}>\r\n                                Leave a message\r\n                    </Typography>\r\n                        </animated.div>\r\n                        <animated.div style={springSecond}>\r\n                            <Typography style={{\r\n                                width: \"max-content\", color: \"rgba(255,255,255,0.7)\", fontFamily: \"'Rajdhani', sans-serif\", fontSize: \"16px\",\r\n                                letterSpacing: \"1px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                            }}>\r\n                                Based in Toronto, Fueled by coffee :)\r\n                    </Typography>\r\n                        </animated.div>\r\n                        <animated.div style={springSecond}>\r\n                            <div style={{ cursor: \"pointer\", marginRight: \"1.1rem\", marginTop: \"24px\" }} onClick={() => { window.open(\"https://github.com/kobayashikento\") }}>\r\n                                <UseAnimations animation={github} loop={true} strokeColor=\"white\" size={40} />\r\n                            </div>\r\n                            <div style={{ cursor: \"pointer\", marginRight: \"1.1rem\", marginTop: \"24px\" }} onClick={() => { window.open(\"https://ca.linkedin.com/in/kento-kobayashi-1a7330120\") }}>\r\n                                <UseAnimations animation={linkedin} loop={true} strokeColor=\"white\" size={40} />\r\n                            </div>\r\n                            <div style={{ cursor: \"pointer\", marginRight: \"2.2rem\", marginTop: \"24px\" }} onClick={() => { window.location.href = \"mailto:kentokobayashik@gmail.com?\" }} >\r\n                                <UseAnimations animation={mail} autplay=\"true\" strokeColor=\"white\" size={40} />\r\n                            </div>\r\n                        </animated.div>\r\n                    </animated.div>\r\n                    <animated.div style={{ ...videoSpring, height: \"70%\", width: \"54%\", position: \"absolute\", boxShadow: \"rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px\" }}>\r\n                        <animated.div style={videoOverlay} />\r\n                        <img src={torontoBack} style={{ height: \"100%\", width: \"100%\", borderRadius: \"2px\", position: \"absolute\" }} />\r\n                        <animated.div style={springThird}>\r\n                            <Typography style={{\r\n                                width: \"max-content\", color: \"white\", fontFamily: \"'Abril Fatface', cursive\", fontSize: \"7rem\", textShadow: \"0 10px 30px rgb(2 11 22 / 50%)\"\r\n                            }}>\r\n                                05\r\n                    </Typography>\r\n                        </animated.div>\r\n                    </animated.div>\r\n                </React.Fragment>\r\n                :\r\n                <MobileContent\r\n                    contentModalOpen={false}\r\n                    pic={torontoBack}\r\n                    handleClick={() => {}}\r\n                    render={props.render}\r\n                    content={{ title: \"Get In Touch\", subtitle: \"Leave a message\", description: \"Based in Toronto, Fueled by coffee :)\", number: \"04\" }}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Contact);","D:\\Storage\\portfolio\\src\\Sections\\Expcon.js",["111","112"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { useSpring, animated, config, useSprings } from 'react-spring'\r\n\r\nimport expconVid from '../Assets/videos/expcondemo.mov';\r\nimport pauseVideo from '../Assets/videos/expcondemopauseedit2.png';\r\n\r\nimport HoverVideoPlayer from 'react-hover-video-player';\r\n\r\nimport '../Assets/styles/expconStyle.scss';\r\n\r\nimport * as easings from 'd3-ease';\r\n\r\nimport MobileContent from '../Components/MobileContent';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport ProductInfo from '../Components/ProductInfo';\r\n\r\nimport mockOverview from '../Assets/pictures/expcon_main_mock.png';\r\nimport mockAll from '../Assets/pictures/expcon_all_mock.png';\r\nimport longpic1 from '../Assets/pictures/expcon_long_1.png';\r\nimport longpic2 from '../Assets/pictures/expcon_long_2.png';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setModalOpen } from '../Redux/actions/propertyAction';\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nconst content = {\r\n    mockOverview: mockOverview, dutiesText: [\"designer\", \"developer\"], techText: [\"React\", \"Redux\", \"JavaScript\", \"Material UI\"],\r\n    dateText: \"Jan, 2021\", overviewText: \"A website that focuses on building an interactive online music experience.\",\r\n    mockAll: mockAll, detailsText: \"This website was built using React and focuses heavily on engaging the viewers through the use of parallaxes and meaningful animations. I created functional components for sections that had similar layouts to reduce unnecessary code and used React Redux so that components would share global states to reduce client-side lags.\",\r\n    longpic1: longpic1, longpic2: longpic2, mainPicWidth: \"70%\",\r\n    focusDevText: \"Learned WebGL and three.JS to build a  more interactive video transition for the landing page. In addition, I learned GSAP (GreenSock) to implement scrollTo() handlers on the react-smooth-scrollbar library instead of creating a separate onScroll Listneter to time the animations which significantly reduce the lag.\",\r\n    focusDesignText: \"Implemented a parallax effect through CSS properties and onScroll Listeners to make the website feel longer and wider with the purpose of further engaging the user. Took advantage of the contrast between bright and dark colors to create an “interactive” experience.\"\r\n}\r\n\r\nconst Slide = React.forwardRef(function Slide(props, ref) {\r\n    const { in: open, children, onEnter, onExited, ...other } = props;\r\n    const style = useSpring({\r\n        from: { transform: \"translateY(0%)\" },\r\n        to: { transform: open ? \"translateY(0%)\" : \"translateY(100%)\" },\r\n        config: { duration: 400 },\r\n        onStart: () => {\r\n            if (open && onEnter) {\r\n                onEnter();\r\n            }\r\n        },\r\n        onRest: () => {\r\n            if (!open && onExited) {\r\n                onExited();\r\n            }\r\n        },\r\n    });\r\n\r\n    return (\r\n        <animated.div ref={ref} style={style} {...other}>\r\n            {children}\r\n        </animated.div>\r\n    );\r\n});\r\n\r\nconst Expcon = (props) => {\r\n\r\n    const matches = useMediaQuery('(min-width:1200px)', { noSsr: true });\r\n\r\n    const [expModalOpen, setExpModalOpen] = React.useState(false);\r\n    const [initialRender, setInitialRender] = React.useState(true);\r\n\r\n    const springFirst = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-150%)` },\r\n        from: { transform: `translateX(-150%)`, zIndex: 5 },\r\n        config: { duration: 800, easing: easings.easeCubicOut },\r\n        delay: 300\r\n    });\r\n\r\n    const springLine = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-6.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-6.5rem)`, zIndex: 5 },\r\n        delay: 300\r\n    });\r\n\r\n    const springLineMove = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-9.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-9.5rem)`, zIndex: 5 },\r\n        delay: 500\r\n    });\r\n\r\n    const springSecond = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-110%)` },\r\n        from: { transform: `translateX(-110%)`, zIndex: 5 },\r\n        delay: 600\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if (props.render) {\r\n            setTimeout(() => {\r\n                setInitialRender(false);\r\n            }, 100)\r\n        } else if (!props.render) {\r\n            setInitialRender(true);\r\n        }\r\n    }, [props.render]);\r\n\r\n    const videoSpring = useSpring({\r\n        to: {\r\n            transform: props.render ? \"scale(1) translate(0%, -50%)\" : \"scale(0.6) translate(10% ,-50%)\", opacity: props.render ? 1 : 0,\r\n            height: expModalOpen ? \"100%\" : \"70%\", width: expModalOpen ? \"66%\" : \"54%\", right: expModalOpen ? \"0%\" : \"8%\"\r\n        },\r\n        from: {\r\n            right: \"8%\", top: \"50%\", transform: \"scale(0.6) translate(10% ,-50%)\", transformOrigin: \"top center 20px\", opacity: 0,\r\n            height: \"70%\", width: \"54%\", zIndex: 3\r\n        },\r\n        config: { duration: expModalOpen ? 600 : 1500, easing: easings.easePolyOut.exponent(2.04) },\r\n        delay: initialRender ? 600 : 0\r\n    });\r\n\r\n    const videoOverlay = useSpring({\r\n        to: { width: props.render ? \"0%\" : \"100%\" },\r\n        from: { position: \"absolute\", height: \"100%\", width: \"100%\", background: \"linear-gradient(90deg, #ff4d5a 10%, #072142 20%)\", zIndex: 2, right: \"0\" },\r\n        config: { duration: 1000, easing: easings.easeQuadOut },\r\n        delay: 300\r\n    });\r\n\r\n    const springThird = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-100%)`, opacity: props.render ? 1 : 0, right: expModalOpen ? \"3%\" : \"-6.6%\" },\r\n        from: { right: \"-6.6%\", zIndex: 5, bottom: \"8%\", position: \"absolute\", transform: `translateX(-100%)`, opacity: 0 },\r\n        delay: props.modalOpen ? 0 : 600\r\n    });\r\n\r\n    const handleClick = () => {\r\n        props.setModalOpen(true);\r\n        setExpModalOpen(true);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!props.modalOpen) {\r\n            setExpModalOpen(false);\r\n        }\r\n    }, [props.modalOpen])\r\n\r\n    const handleEscape = () => {\r\n        props.setModalOpen(false);\r\n        setExpModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", height: \"100vh\", position: \"relative\", width: \"100vw\" }}>\r\n            {matches ?\r\n                <React.Fragment>\r\n                    <animated.div style={{ overflow: \"hidden\", display: \"flex\", height: \"100%\", flexDirection: \"column\", marginLeft: \"12.2vmax\", justifyContent: \"center\", alignItems: \"flex-start\" }}>\r\n                        <animated.div style={springFirst}>\r\n                            <Typography style={{\r\n                                color: \"white\", fontFamily: \"FuturaM\", fontSize: \"5.2rem\",\r\n                                letterSpacing: \"0.5rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.3)\", fontWeight: \"bold\"\r\n                            }}>\r\n                                EXP|CON\r\n                </Typography>\r\n                        </animated.div>\r\n                        <div style={{ overflow: \"hidden\", marginTop: \"1%\" }}>\r\n                            <animated.div style={springLine}>\r\n                                <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"0.5rem\", marginTop: \"0.7rem\" }} />\r\n                            </animated.div>\r\n                            <animated.div style={{ ...springLineMove, marginLeft: \"3.3rem\" }}>\r\n                                <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"1.2rem\", marginTop: \"0.7rem\" }} />\r\n                            </animated.div>\r\n                        </div>\r\n                        <animated.div style={springSecond}>\r\n                            <Typography style={{\r\n                                width: \"max-content\", color: \"white\", fontFamily: \"FuturaB\", fontSize: \"1.8rem\", letterSpacing: \"0.2rem\",\r\n                                marginTop: \"4px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                            }}>\r\n                                website\r\n                    </Typography>\r\n                        </animated.div>\r\n                        <animated.div style={springSecond}>\r\n                            <Typography style={{\r\n                                width: \"max-content\", color: \"rgba(255,255,255,0.7)\", fontFamily: \"FuturaM\", fontSize: \"16px\",\r\n                                letterSpacing: \"1.5px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                            }}>\r\n                                React, Firebase, Redux, JavaScript\r\n                    </Typography>\r\n                        </animated.div>\r\n                        <animated.div style={springSecond}>\r\n                            <button className=\"explore\" onClick={() => handleClick()} style={{ fontFamily: \"FuturaB\", boxShadow: \"rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px\" }}>\r\n                                Explore\r\n                            <span className=\"icon-right\"></span>\r\n                                <span className=\"icon-right after\"></span>\r\n                            </button>\r\n                        </animated.div>\r\n                    </animated.div>\r\n                    <animated.div style={{\r\n                        ...videoSpring, position: \"absolute\",\r\n                        boxShadow: \"rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px\"\r\n                    }}>\r\n                        <animated.div style={videoOverlay} />\r\n                        <HoverVideoPlayer\r\n                            videoSrc={expconVid}\r\n                            sizingMode=\"container\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                            pausedOverlay={<img src={pauseVideo} alt=\"\" style={{ objectFit: \"cover\", width: \"100%\", height: \"100%\", borderRadius: \"2px\" }} />}\r\n                        />\r\n                        <animated.div style={springThird}>\r\n                            <Typography style={{\r\n                                width: \"max-content\", color: \"white\", fontFamily: \"'Abril Fatface', cursive\", fontSize: \"7rem\", textShadow: \"0 10px 30px rgb(2 11 22 / 50%)\"\r\n                            }}>\r\n                                03\r\n                    </Typography>\r\n                        </animated.div>\r\n                    </animated.div>\r\n                </React.Fragment>\r\n                :\r\n                <MobileContent\r\n                    contentModalOpen={expModalOpen}\r\n                    pic={pauseVideo}\r\n                    handleClick={() => handleClick()}\r\n                    render={props.render}\r\n                    content={{ title: \"EXP|CON\", subtitle: \"website\", description: \"React, Firebase, Redux, JavaScript\", number: \"02\" }}\r\n                />\r\n            }\r\n            <Modal\r\n                open={expModalOpen}\r\n                onClose={handleEscape}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Slide in={expModalOpen}>\r\n                    <ProductInfo\r\n                        content={content}\r\n                        picHeight={\"68%\"}\r\n                        handleEscape={() => handleEscape()}\r\n                    />\r\n                </Slide>\r\n            </Modal>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        modalOpen: state.propertyReducer.modalOpen,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setModalOpen: (boolean) => dispatch(setModalOpen(boolean))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Expcon);","D:\\Storage\\portfolio\\src\\Sections\\About.js",["113"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { useSpring, animated } from 'react-spring'\r\n\r\nimport MobileContent from '../Components/MobileContent';\r\n\r\n//Photo by AltumCode on Unsplash\r\nimport aboutPic from '../Assets/pictures/about_pic.png';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setModalOpen } from '../Redux/actions/propertyAction';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport AboutMe from '../Components/AboutMe';\r\n\r\nimport * as easings from 'd3-ease';\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nconst Slide = React.forwardRef(function Slide(props, ref) {\r\n    const { in: open, children, onEnter, onExited, ...other } = props;\r\n    const style = useSpring({\r\n        from: { transform: \"translateY(0%)\" },\r\n        to: { transform: open ? \"translateY(0%)\" : \"translateY(100%)\" },\r\n        config: { duration: 400 },\r\n        onStart: () => {\r\n            if (open && onEnter) {\r\n                onEnter();\r\n            }\r\n        },\r\n        onRest: () => {\r\n            if (!open && onExited) {\r\n                onExited();\r\n            }\r\n        },\r\n    });\r\n\r\n    return (\r\n        <animated.div ref={ref} style={style} {...other}>\r\n            {children}\r\n        </animated.div>\r\n    );\r\n});\r\n\r\nconst About = (props) => {\r\n\r\n    const [aboutModalOpen, setAboutModalOpen] = React.useState(false);\r\n    const [initialRender, setInitialRender] = React.useState(true);\r\n\r\n    const matches = useMediaQuery('(min-width:1200px)', { noSsr: true });\r\n\r\n    React.useEffect(() => {\r\n        if (props.render) {\r\n            setTimeout(() => {\r\n                setInitialRender(false);\r\n            }, 100)\r\n        } else if (!props.render) {\r\n            setInitialRender(true);\r\n        }\r\n    }, [props.render]);\r\n\r\n    const springFirst = useSpring({\r\n        to: { transform: props.render ? `translateX(1%)` : `translateX(-150%)` },\r\n        from: { transform: `translateX(-150%)`, zIndex: 5 },\r\n        config: { duration: 800, easing: easings.easeCubicOut },\r\n        delay: 300\r\n    });\r\n\r\n    const springLine = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-6.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-6.5rem)`, zIndex: 5 },\r\n        delay: 300\r\n    });\r\n\r\n    const springLineMove = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-9.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-9.5rem)`, zIndex: 5 },\r\n        delay: 500\r\n    });\r\n\r\n    const springSecond = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-110%)` },\r\n        from: { transform: `translateX(-110%)`, zIndex: 5 },\r\n        delay: 600\r\n    });\r\n\r\n    const videoSpring = useSpring({\r\n        to: {\r\n            transform: props.render ? \"scale(1) translate(0%, -50%)\" : \"scale(0.6) translate(10% ,-50%)\", opacity: props.render ? 1 : 0,\r\n            height: aboutModalOpen ? \"100%\" : \"70%\", width: aboutModalOpen ? \"66%\" : \"54%\", right: aboutModalOpen ? \"0%\" : \"8%\"\r\n        },\r\n        from: { right: \"8%\", top: \"50%\", transform: \"scale(0.6) translate(10% ,-50%)\", transformOrigin: \"top center 20px\", opacity: 0, height: \"70%\", width: \"54%\", },\r\n        config: { duration: aboutModalOpen ? 600 : 1500, easing: easings.easePolyOut.exponent(2.04) },\r\n        delay: initialRender ? 600 : 0\r\n    });\r\n\r\n    const videoOverlay = useSpring({\r\n        to: { width: props.render ? \"0%\" : \"100%\" },\r\n        from: { position: \"absolute\", height: \"100%\", width: \"100%\", background: \"linear-gradient(90deg, #ff4d5a 10%, #072142 20%)\", zIndex: 2, right: \"0\" },\r\n        config: { duration: 1000, easing: easings.easeQuadOut },\r\n        delay: 400\r\n    });\r\n\r\n    const springThird = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-100%)`, opacity: props.render ? 1 : 0, right: aboutModalOpen ? \"3%\" : \"-6.6%\" },\r\n        from: { right: \"-6.6%\", zIndex: 5, bottom: \"8%\", position: \"absolute\", transform: `translateX(-100%)`, opacity: 0 },\r\n        delay: props.modalOpen ? 0 : 600\r\n    });\r\n\r\n    const handleClick = () => {\r\n        props.setModalOpen(true);\r\n        setAboutModalOpen(true);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!props.modalOpen) {\r\n            setAboutModalOpen(false);\r\n        }\r\n    }, [props.modalOpen])\r\n\r\n    const handleEscape = () => {\r\n        props.setModalOpen(false);\r\n        setAboutModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", height: \"100vh\", position: \"relative\", width: \"100vw\" }}>\r\n            {\r\n                matches ?\r\n                    <React.Fragment>\r\n                        <animated.div style={{ overflow: \"hidden\", display: \"flex\", height: \"100%\", flexDirection: \"column\", marginLeft: \"12.2vmax\", justifyContent: \"center\", alignItems: \"flex-start\" }}>\r\n                            <animated.div style={springFirst}>\r\n                                <Typography style={{\r\n                                    color: \"white\", fontFamily: \"FuturaM\", fontSize: \"5.2rem\",\r\n                                    letterSpacing: \"0.5rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.3)\", fontWeight: \"bold\"\r\n                                }}>\r\n                                    About\r\n                </Typography>\r\n                            </animated.div>\r\n                            <div style={{ overflow: \"hidden\", marginTop: \"1%\" }}>\r\n                                <animated.div style={springLine}>\r\n                                    <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"0.5rem\", marginTop: \"0.7rem\" }} />\r\n                                </animated.div>\r\n                                <animated.div style={{ ...springLineMove, marginLeft: \"3.3rem\" }}>\r\n                                    <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"1.2rem\", marginTop: \"0.7rem\" }} />\r\n                                </animated.div>\r\n                            </div>\r\n                            <animated.div style={springSecond}>\r\n                                <Typography style={{\r\n                                    width: \"max-content\", color: \"white\", fontFamily: \"FuturaB\", fontSize: \"1.8rem\", letterSpacing: \"0.2rem\",\r\n                                    marginTop: \"4px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                                }}>\r\n                                    front-end developer\r\n                    </Typography>\r\n                            </animated.div>\r\n                            <animated.div style={springSecond}>\r\n                                <Typography style={{\r\n                                    width: \"max-content\", color: \"rgba(255,255,255,0.7)\", fontFamily: \"FuturaM\", fontSize: \"16px\",\r\n                                    letterSpacing: \"1.5px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                                }}>\r\n                                    U of T Grad: Mathematics and Statistics\r\n                    </Typography>\r\n                            </animated.div>\r\n                            <animated.div style={springSecond}>\r\n                                <button onClick={() => handleClick()} className=\"explore\" style={{ fontFamily: \"FuturaB\", boxShadow: \"rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px\" }}>More<span className=\"icon-right-more\"></span><span className=\"icon-right-more after\"></span></button>\r\n                            </animated.div>\r\n                        </animated.div>\r\n                        <animated.div style={{ ...videoSpring, position: \"absolute\", boxShadow: \"rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px\" }}>\r\n                            <animated.div style={videoOverlay} />\r\n                            <img src={aboutPic} style={{ height: \"100%\", width: \"100%\", borderRadius: \"2px\" }} />\r\n                            <animated.div style={springThird}>\r\n                                <Typography style={{\r\n                                    width: \"max-content\", color: \"white\", fontFamily: \"'Abril Fatface', cursive\", fontSize: \"7rem\", textShadow: \"0 10px 30px rgb(2 11 22 / 50%)\"\r\n                                }}>\r\n                                    01\r\n                    </Typography>\r\n                            </animated.div>\r\n                        </animated.div>\r\n                    </React.Fragment>\r\n                    :\r\n                    <MobileContent\r\n                        contentModalOpen={aboutModalOpen}\r\n                        pic={aboutPic}\r\n                        handleClick={() => handleClick()}\r\n                        render={props.render}\r\n                        content={{ title: \"About\", subtitle: \"front-end developer\", description: \"U of T Grad: Mathematics and Statistics\", number: \"01\" }}\r\n                    />\r\n            }\r\n            <Modal\r\n                open={aboutModalOpen}\r\n                onClose={handleEscape}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Slide in={aboutModalOpen}>\r\n                    <AboutMe\r\n                        handleEscape={() => handleEscape()}\r\n                    />\r\n                </Slide>\r\n            </Modal>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        modalOpen: state.propertyReducer.modalOpen,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setModalOpen: (boolean) => dispatch(setModalOpen(boolean))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(About);","D:\\Storage\\portfolio\\src\\Sections\\SideNav.js",[],"D:\\Storage\\portfolio\\src\\Sections\\Landing.js",["114","115","116","117"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport Vivus from 'vivus';\r\n\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nimport browser_coding_svg from '../Assets/resources/browser_coding.svg';\r\nimport coding_curly_svg from '../Assets/resources/coding_curly.svg';\r\nimport coding_curly_blink_svg from '../Assets/resources/coding_curly_blink.svg';\r\nimport application_dev_code_svg from '../Assets/resources/application_dev_code.svg';\r\nimport application_development from '../Assets/resources/application_dev.svg';\r\nimport web_design_svg from '../Assets/resources/web_design.svg';\r\nimport web_design_txt_svg from '../Assets/resources/web_design_txt.svg';\r\nimport web_design_sun_svg from '../Assets/resources/web_design_sun.svg';\r\nimport web_design_sun_container_svg from '../Assets/resources/web_design_sun_container.svg';\r\nimport web_design_arrow_svg from '../Assets/resources/web_design_arrow.svg';\r\n\r\nimport '../Assets/styles/landingStyle.css';\r\nimport '../Assets/styles/landingStyle.scss';\r\n\r\nimport * as easings from 'd3-ease';\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nconst calc = (x, y) => [x - window.innerWidth / 2, y - window.innerHeight / 2]\r\nconst trans1 = (x, y) => `translate3d(${x / 50 + 15}px,${y / 50}px,0)`\r\nconst trans2 = (x, y) => `translate3d(${x / 8 + 35}px,${y / 8 - 130}px,0)`\r\nconst trans3 = (x, y) => `translate3d(${x / 6 - 20}px,${y / 6 - 90}px,0)`\r\nconst trans4 = (x, y) => `translate3d(${x / 3.5 + 10}px,${y / 3.5 - 10}px,0)`\r\nconst trans5 = (x, y) => `translate3d(${x / 8 - 5}px,${y / 8 - 10}px,0)`\r\nconst trans6 = (x, y) => `translate3d(${x / 8 + 10}px,${y / 8 - 10}px,0)`\r\nconst trans7 = (x, y) => `translate3d(${x / 6 - 10}px,${y / 6 - 10}px,0)`\r\n\r\nconst Landing = (props) => {\r\n\r\n    const matches = useMediaQuery('(min-width:1200px)', { noSsr: true });\r\n\r\n    let browser_coding_ref = React.useRef(null);\r\n    let coding_curly_ref = React.useRef(null);\r\n    let coding_curly_blink_ref = React.useRef(null);\r\n    let application_dev_ref = React.useRef(null);\r\n    let application_dev_code_ref = React.useRef(null);\r\n    let web_design_ref = React.useRef(null);\r\n    let web_design_txt_ref = React.useRef(null);\r\n    let web_design_sun_ref = React.useRef(null);\r\n    let web_design_sun_container_ref = React.useRef(null);\r\n    let web_design_arrow_ref = React.useRef(null);\r\n\r\n    const [prop, set] = useSpring(() => ({ xy: [0, 0], config: { mass: 10, tension: 550, friction: 140 } }));\r\n    const [startBlink, setBlink] = React.useState(false);\r\n\r\n    const [browserVivus, setBrowswerVivus] = React.useState();\r\n    const [coderCurlyVivus, setCoderCurlyVivus] = React.useState();\r\n    const [coderCurlyBlinkVivus, setCoderCurlyBlinkVivus] = React.useState();\r\n    const [appliactionDev, setAppliactionDev] = React.useState();\r\n    const [appliactionDevCode, setAppliactionDevCode] = React.useState();\r\n    const [webDesignVivus, setWebDesignVivus] = React.useState();\r\n    const [webDesignTxtVivus, setWebDesignTxtVivus] = React.useState();\r\n    const [webDesignSunVivus, setWebDesignSunVivus] = React.useState();\r\n    const [webDesignSunContainerVivus, setWebDesignSunContainerVivus] = React.useState();\r\n    const [webDesignArrowVivus, setWebDesignArrowVivus] = React.useState();\r\n\r\n    const [hover, onHover] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        setBrowswerVivus(new Vivus(browser_coding_ref.current, { file: browser_coding_svg, type: `delayed`, start: `manual`, animTimingFunction: Vivus.EASE_IN }));\r\n        setCoderCurlyVivus(new Vivus(coding_curly_ref.current, { file: coding_curly_svg, type: `delayed`, start: `manual`, animTimingFunction: Vivus.EASE_IN }));\r\n        setCoderCurlyBlinkVivus(new Vivus(coding_curly_blink_ref.current, { file: coding_curly_blink_svg, type: `delayed`, start: `manual`, delay: 50, animTimingFunction: Vivus.EASE_IN }, () => { setBlink(true) }));\r\n        setAppliactionDev(new Vivus(application_dev_ref.current, { file: application_development, type: `delayed`, start: `manual`, animTimingFunction: Vivus.EASE_IN }));\r\n        setAppliactionDevCode(new Vivus(application_dev_code_ref.current, { file: application_dev_code_svg, type: `delayed`, start: `manual`, animTimingFunction: Vivus.EASE_IN }));\r\n        setWebDesignVivus(new Vivus(web_design_ref.current, { file: web_design_svg, type: `delayed`, start: `manual`, animTimingFunction: Vivus.EASE_IN }));\r\n        setWebDesignTxtVivus(new Vivus(web_design_txt_ref.current, { file: web_design_txt_svg, type: `delayed`, start: `manual`, animTimingFunction: Vivus.EASE_IN }));\r\n        setWebDesignSunVivus(new Vivus(web_design_sun_ref.current, { file: web_design_sun_svg, type: `delayed`, start: `manual`, animTimingFunction: Vivus.EASE_IN }));\r\n        setWebDesignSunContainerVivus(new Vivus(web_design_sun_container_ref.current, { file: web_design_sun_container_svg, type: `delayed`, start: `manual`, animTimingFunction: Vivus.EASE_IN }));\r\n        setWebDesignArrowVivus(new Vivus(web_design_arrow_ref.current, { file: web_design_arrow_svg, type: `delayed`, start: `manual`, animTimingFunction: Vivus.EASE_IN }));\r\n    }, [])\r\n\r\n    const handlePlay = () => {\r\n        if (props.svgRender && browserVivus !== undefined) {\r\n            browserVivus.play(3.5);\r\n            coderCurlyVivus.play(2);\r\n            webDesignVivus.play(2);\r\n            webDesignTxtVivus.play(2);\r\n            webDesignSunVivus.play(2);\r\n            webDesignArrowVivus.play(2);\r\n            coderCurlyBlinkVivus.play(2);\r\n            appliactionDev.play(3.5);\r\n            appliactionDevCode.play(2);\r\n            webDesignSunContainerVivus.play(2);\r\n        }\r\n    }\r\n\r\n    const springFirstText = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-100%)` },\r\n        from: { transform: `translateX(-100%)` },\r\n        delay: 200,\r\n        config: { duration: 1000, easing: easings.easeCubicOut },\r\n    })\r\n\r\n    const springSecondText = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-100%)` },\r\n        from: { transform: `translateX(-100%)` },\r\n        config: { duration: 500 },\r\n        delay: 400,\r\n        onRest: () => handlePlay()\r\n    })\r\n\r\n    const springLine = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-6.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-6.5rem)` },\r\n        delay: 100\r\n    })\r\n\r\n    const springLineMove = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-9.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-9.5rem)` },\r\n        delay: 300\r\n    })\r\n\r\n    const springHorizontalLineMove = useSpring({\r\n        to: {\r\n            transform: props.render ? `rotate(90deg) translate(0,0)`\r\n                : `rotate(90deg) translate(-6.5rem,0)`, opacity: props.render ? 1 : 0\r\n        },\r\n        from: { width: \"2.2rem\", transform: `rotate(90deg) translate(-6.5rem,0)`, opacity: 0 },\r\n        delay: 300\r\n    })\r\n\r\n    const springSecond = useSpring({\r\n        to: { transform: props.render ? `translateY(0%)` : `translateY(100%)` },\r\n        from: { transform: `translateY(100%)` },\r\n        config: { duration: 400 },\r\n        delay: 500\r\n    })\r\n\r\n    React.useEffect(() => {\r\n        if (!props.svgRender && browserVivus !== undefined) {\r\n            coderCurlyVivus.play(-2);\r\n            coderCurlyBlinkVivus.play(-2);\r\n            browserVivus.play(-2);\r\n            appliactionDev.play(-2);\r\n            appliactionDevCode.play(-2);\r\n            webDesignVivus.play(-2);\r\n            webDesignTxtVivus.play(-2);\r\n            webDesignSunVivus.play(-2);\r\n            webDesignArrowVivus.play(-2);\r\n            webDesignSunContainerVivus.play(-2);\r\n        }\r\n    }, [props.svgRender])\r\n\r\n    const carouselCodeSprings = useSpring({\r\n        to: {\r\n            width: props.carouselIndex === 0 ? \"45%\" : \"26%\", zIndex: props.carouselIndex === 0 ? 10 : -1,\r\n            transform: props.carouselIndex === 0 ? \"translateX(40%)\" : props.carouselIndex === 1 ? \"translateX(200%)\" : \"translateX(0%)\",\r\n            height: props.carouselIndex === 0 ? \"0%\" : \"57%\"\r\n        },\r\n        from: { width: \"45%\", zIndex: 10, height: \"0%\", transform: \"translateX(40%)\", position: \"absolute\" }\r\n    });\r\n\r\n    const carouselDesignSprings = useSpring({\r\n        to: {\r\n            width: props.carouselIndex === 1 ? \"45%\" : \"26%\", zIndex: props.carouselIndex === 1 ? 10 : -1,\r\n            transform: props.carouselIndex === 1 ? \"translateX(50%)\" : props.carouselIndex === 2 ? \"translateX(200%)\" : \"translateX(30%)\",\r\n            height: props.carouselIndex === 1 ? \"30%\" : \"90%\"\r\n        },\r\n        from: { width: \"45%\", height: \"90%\", zIndex: -1, transform: \"translateX(-100%)\", position: \"absolute\" }\r\n    });\r\n\r\n    const carouselMobileSprings = useSpring({\r\n        to: {\r\n            width: props.carouselIndex === 2 ? \"45%\" : \"26%\", zIndex: props.carouselIndex === 2 ? 10 : -1,\r\n            transform: props.carouselIndex === 2 ? \"translateX(50%)\" : props.carouselIndex === 1 ? \"translateX(30%)\" : \"translateX(200%)\",\r\n            height: props.carouselIndex == 2 ? \"30%\" : \"90%\"\r\n        },\r\n        from: { width: \"45%\", zIndex: -1, transform: \"translateX(100%)\", height: \"90%\", position: \"absolute\" }\r\n    });\r\n\r\n    const barSpring = useSpring({\r\n        to: { transform: hover ? \"scaleY(2)\" : \"scaleY(1)\" },\r\n        from: { transform: \"scaleY(1)\" }\r\n    })\r\n\r\n    const aniSpring = useSpring({\r\n        to: { transform: hover ? \"rotate(-90deg) translate(22px, -3px)\" : \"rotate(-90deg) translate(-12px, -3px)\" },\r\n        from: { transform: \"rotate(-90deg) translate(-12px, -3px)\", position: \"absolute\" }\r\n    })\r\n\r\n    const springThird = useSpring({\r\n        to: { transform: props.render ? ` translateY(0px)` : ` translateY(-110%)`, opacity: props.render ? 1 : 0 },\r\n        from: { transform: ` translateY(110%)`, opacity: 0 },\r\n        config: {\r\n            duration: 600, mass: 1, tension: 280, friction: 60\r\n        },\r\n        delay: 950\r\n    })\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                matches ?\r\n                    <div style={{ display: \"flex\", height: \"100vh\", width: \"100vw\", position: \"relative\", justifyContent: \"center\" }} onMouseMove={({ clientX: x, clientY: y }) => set({ xy: calc(x, y) })}>\r\n                        <animated.div style={{\r\n                            overflow: \"hidden\", display: \"flex\", height: \"100%\",\r\n                            flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"flex-start\", marginLeft: \"12.2vmax\"\r\n                        }}>\r\n                            <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", zIndex: 100 }}>\r\n                                <animated.div style={{ overflow: \"hidden\", transform: prop.xy.interpolate(trans1) }}>\r\n                                    <animated.div style={springFirstText}>\r\n                                        <Typography style={{\r\n                                            color: \"white\", fontFamily: \"FuturaM\", fontSize: \"calc(80px + (88 - 80) * ((100vw - 300px) / (1600 - 300)))\",\r\n                                            letterSpacing: \"0.7rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\", fontWeight: \"bold\"\r\n                                        }}>\r\n                                            KENTO\r\n                        </Typography>\r\n                                    </animated.div>\r\n                                </animated.div>\r\n                                <animated.div style={{ overflow: \"hidden\", transform: prop.xy.interpolate(trans1) }}>\r\n                                    <animated.div style={springSecondText}>\r\n                                        <Typography style={{\r\n                                            color: \"white\", fontFamily: \"FuturaM\", fontSize: \"calc(80px + (88 - 80) * ((100vw - 300px) / (1600 - 300)))\",\r\n                                            letterSpacing: \"0.7rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\", fontWeight: \"bold\"\r\n                                        }}>\r\n                                            KOBAYASHI\r\n                        </Typography>\r\n                                    </animated.div>\r\n                                </animated.div>\r\n                            </div>\r\n                            <div style={{ overflow: \"hidden\", marginTop: \"1%\" }}>\r\n                                <animated.div style={springLine}>\r\n                                    <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"0.5rem\", marginTop: \"0.7rem\" }} />\r\n                                </animated.div>\r\n                                <animated.div style={{ ...springLineMove, marginLeft: \"3.3rem\" }}>\r\n                                    <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"1.2rem\", marginTop: \"0.7rem\" }} />\r\n                                </animated.div>\r\n                            </div>\r\n                            <div style={{ display: \"flex\", marginTop: \"1%\", overflow: \"hidden\" }}>\r\n                                <div style={{ overflow: \"hidden\" }}>\r\n                                    <animated.div style={springSecond}>\r\n                                        <Typography style={{ color: \"white\", fontFamily: \"'Rajdhani', sans-serif\", fontWeight: \"500\", fontSize: \"1.5rem\", letterSpacing: \"0.5rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\" }}>\r\n                                            developer\r\n                        </Typography>\r\n                                    </animated.div>\r\n                                </div>\r\n                                <animated.div style={{ ...springHorizontalLineMove }}>\r\n                                    <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"0.5rem\", marginTop: \"0.7rem\" }} />\r\n                                </animated.div>\r\n                                <div style={{ overflow: \"hidden\" }}>\r\n                                    <animated.div style={{ ...springSecond, marginLeft: \"1.1rem\" }}>\r\n                                        <Typography style={{ width: \"max-content\", color: \"white\", fontFamily: \"FuturaB\", fontSize: \"1.5rem\", letterSpacing: \"0.5rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\" }}>\r\n                                            designer\r\n                        </Typography>\r\n                                    </animated.div>\r\n                                </div>\r\n                            </div>\r\n                        </animated.div>\r\n                        <div style={{\r\n                            display: \"flex\", width: \"40vw\", height: \"100vh\", alignItems: \"center\", position: \"absolute\",\r\n                            right: \"0%\", zIndex: -1, marginTop: \"10%\"\r\n                        }}>\r\n                            <animated.div style={{ ...carouselCodeSprings, zIndex: 2 }}>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans2), position: \"absolute\", zIndex: 10 }} ref={browser_coding_ref}>\r\n                                </animated.div>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans3), position: \"absolute\", zIndex: 10 }} ref={coding_curly_ref}>\r\n                                </animated.div>\r\n                                <animated.div className={startBlink ? \"blink\" : \"\"} style={{ transform: prop.xy.interpolate(trans3), position: \"absolute\", zIndex: 10 }} ref={coding_curly_blink_ref}>\r\n                                </animated.div>\r\n                            </animated.div>\r\n                            <animated.div style={{ ...carouselDesignSprings, zIndex: 2 }}>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans7), position: \"absolute\", zIndex: 10 }} ref={web_design_ref} >\r\n                                </animated.div>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans7), position: \"absolute\", overflow: \"hidden\", zIndex: 10 }} ref={web_design_sun_container_ref}>\r\n                                    <animated.div className=\"rotate\" style={{ transform: prop.xy.interpolate(trans6), position: \"absolute\", zIndex: 10 }}\r\n                                        ref={web_design_sun_ref} >\r\n                                    </animated.div>\r\n                                </animated.div>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans5), position: \"absolute\", overflow: \"hidden\", zIndex: 10 }} ref={web_design_txt_ref}>\r\n                                </animated.div>\r\n                                <animated.div className={props.carouselIndex === 1 ? \"\" : \"\"} style={{ transform: prop.xy.interpolate(trans6), position: \"absolute\", zIndex: 10 }} ref={web_design_arrow_ref} >\r\n                                </animated.div>\r\n                            </animated.div>\r\n                            <animated.div style={{ ...carouselMobileSprings, zIndex: 2 }}>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans7), position: \"absolute\", zIndex: 10 }} ref={application_dev_ref} >\r\n                                </animated.div>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans5), position: \"absolute\", zIndex: 10 }} ref={application_dev_code_ref}>\r\n                                </animated.div>\r\n                            </animated.div>\r\n                        </div>\r\n                        <animated.div \r\n                            style={{ position: 'absolute', bottom: \"0px\", left: \"3%\", zIndex: 5, ...springThird, cursor: \"pointer\" }}>\r\n                            <animated.div style={aniSpring}>\r\n                                <Typography style={{\r\n                                    textAlign: \"left\", fontSize: `16px`, fontStyle: \"normal\",\r\n                                    ontFamily: \"FuturaM\", color: \"white\", transformOrigin: \"bottom\",\r\n                                }}>\r\n                                    scroll\r\n    </Typography>\r\n                            </animated.div>\r\n                            <animated.div style={barSpring}>\r\n                                <div className=\"loading_line_wrapper\" >\r\n                                    <div className=\"loading_line\">\r\n                                        <div className=\"loading_line_inner loading_line_inner--1\"></div>\r\n                                        <div className=\"loading_line_inner loading_line_inner--2\"></div>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ height: \"65px\", background: \"#333\", width: \"2px\" }} />\r\n                            </animated.div>\r\n                        </animated.div>\r\n                    </div >\r\n                    :\r\n                    <div style={{ display: \"flex\", height: \"100vh\", width: \"100vw\", position: \"relative\", justifyContent: \"center\" }} onMouseMove={({ clientX: x, clientY: y }) => set({ xy: calc(x, y) })}>\r\n                        <animated.div style={{\r\n                            display: \"flex\", flexDirection: \"column\", width: \"100%\", justifyContent: \"center\", alignItems: \"center\", marginBottom: \"4.4vmax\"\r\n                        }}>\r\n                            <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\", zIndex: 100 }}>\r\n                                <animated.div style={{ overflow: \"hidden\", transform: prop.xy.interpolate(trans1) }}>\r\n                                    <animated.div style={springFirstText}>\r\n                                        <Typography style={{\r\n                                            color: \"white\", fontFamily: \"FuturaM\", letterSpacing: \"0.7rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\", fontWeight: \"bold\",\r\n                                            fontSize: \"calc(32px + (44 - 32) * ((100vw - 300px) / (1200 - 300)))\"\r\n                                        }}>\r\n                                            KENTO\r\n                    </Typography>\r\n                                    </animated.div>\r\n                                </animated.div>\r\n                                <animated.div style={{ overflow: \"hidden\", transform: prop.xy.interpolate(trans1) }}>\r\n                                    <animated.div style={springSecondText}>\r\n                                        <Typography style={{\r\n                                            color: \"white\", fontFamily: \"FuturaM\", letterSpacing: \"0.7rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\", fontWeight: \"bold\",\r\n                                            fontSize: \"calc(32px + (44 - 32) * ((100vw - 300px) / (1200 - 300)))\"\r\n                                        }}>\r\n                                            KOBAYASHI\r\n                    </Typography>\r\n                                    </animated.div>\r\n                                </animated.div>\r\n                            </div>\r\n                            <div style={{ overflow: \"hidden\", marginTop: \"1%\" }}>\r\n                                <animated.div style={springLine}>\r\n                                    <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"0.5rem\", marginTop: \"0.7rem\" }} />\r\n                                </animated.div>\r\n                                <animated.div style={{ ...springLineMove, marginLeft: \"3.3rem\" }}>\r\n                                    <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"1.2rem\", marginTop: \"0.7rem\" }} />\r\n                                </animated.div>\r\n                            </div>\r\n                            <div style={{ display: \"flex\", marginTop: \"1%\" }}>\r\n                                <div style={{ overflow: \"hidden\" }}>\r\n                                    <animated.div style={springSecond}>\r\n                                        <Typography style={{ color: \"white\", fontFamily: \"'Rajdhani', sans-serif\", fontWeight: \"500\", fontSize: \"1rem\", letterSpacing: \"0.5rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\" }}>\r\n                                            developer\r\n                    </Typography>\r\n                                    </animated.div>\r\n                                </div>\r\n                                <animated.div style={{ ...springHorizontalLineMove }}>\r\n                                    <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"0.5rem\", marginTop: \"0.7rem\" }} />\r\n                                </animated.div>\r\n                                <div style={{ overflow: \"hidden\" }}>\r\n                                    <animated.div style={{ ...springSecond, marginLeft: \"0.4rem\" }}>\r\n                                        <Typography style={{ width: \"max-content\", color: \"white\", fontFamily: \"FuturaB\", fontSize: \"1rem\", letterSpacing: \"0.5rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\" }}>\r\n                                            designer\r\n                    </Typography>\r\n                                    </animated.div>\r\n                                </div>\r\n                            </div>\r\n                        </animated.div>\r\n                        <div style={{\r\n                            display: \"none\", width: \"100%\", height: \"20%\", position: \"absolute\", zIndex: -1, bottom: \"0px\"\r\n                        }}>\r\n                            <animated.div style={{ ...carouselCodeSprings, zIndex: 2 }}>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans2), position: \"absolute\", zIndex: 10 }} ref={browser_coding_ref}>\r\n                                </animated.div>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans3), position: \"absolute\", zIndex: 10 }} ref={coding_curly_ref}>\r\n                                </animated.div>\r\n                                <animated.div className={startBlink ? \"blink\" : \"\"} style={{ transform: prop.xy.interpolate(trans3), position: \"absolute\", zIndex: 10 }} ref={coding_curly_blink_ref}>\r\n                                </animated.div>\r\n                            </animated.div>\r\n                            <animated.div style={{ ...carouselDesignSprings, zIndex: 2 }}>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans7), position: \"absolute\", zIndex: 10 }} ref={web_design_ref} >\r\n                                </animated.div>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans7), position: \"absolute\", overflow: \"hidden\", zIndex: 10 }} ref={web_design_sun_container_ref}>\r\n                                    <animated.div className=\"rotate\" style={{ transform: prop.xy.interpolate(trans6), position: \"absolute\", zIndex: 10 }}\r\n                                        ref={web_design_sun_ref} >\r\n                                    </animated.div>\r\n                                </animated.div>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans5), position: \"absolute\", overflow: \"hidden\", zIndex: 10 }} ref={web_design_txt_ref}>\r\n                                </animated.div>\r\n                                <animated.div className={props.carouselIndex === 1 ? \"\" : \"\"} style={{ transform: prop.xy.interpolate(trans6), position: \"absolute\", zIndex: 10 }} ref={web_design_arrow_ref} >\r\n                                </animated.div>\r\n                            </animated.div>\r\n                            <animated.div style={{ ...carouselMobileSprings, zIndex: 2 }}>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans7), position: \"absolute\", zIndex: 10 }} ref={application_dev_ref} >\r\n                                </animated.div>\r\n                                <animated.div style={{ transform: prop.xy.interpolate(trans5), position: \"absolute\", zIndex: 10 }} ref={application_dev_code_ref}>\r\n                                </animated.div>\r\n                            </animated.div>\r\n                        </div>\r\n                    </div >\r\n            }\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default React.memo(Landing);","D:\\Storage\\portfolio\\src\\Redux\\reducers\\propertyReducer.js",[],"D:\\Storage\\portfolio\\src\\Components\\MobileContent.js",["118"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { useSpring, animated } from 'react-spring'\r\n\r\nimport * as easings from 'd3-ease';\r\n\r\nconst MobileContent = (props) => {\r\n\r\n    const [initialRender, setInitialRender] = React.useState(true);\r\n\r\n    React.useEffect(() => {\r\n        if (props.render) {\r\n            setTimeout(() => {\r\n                setInitialRender(false);\r\n            }, 100)\r\n        } else if (!props.render) {\r\n            setInitialRender(true);\r\n        }\r\n    }, [props.render]);\r\n\r\n    const springFirst = useSpring({\r\n        to: { transform: props.render ? `translateX(1%)` : `translateX(-150%)` },\r\n        from: { transform: `translateX(-150%)`, zIndex: 5 },\r\n        config: { duration: 800, easing: easings.easeCubicOut },\r\n        delay: 300\r\n    });\r\n\r\n    const springLine = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-6.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-6.5rem)`, zIndex: 5 },\r\n        delay: 300\r\n    });\r\n\r\n    const springLineMove = useSpring({\r\n        to: { transform: props.render ? `translateX(0rem)` : `translateX(-9.5rem)` },\r\n        from: { width: \"5.5rem\", transform: `translateX(-9.5rem)`, zIndex: 5 },\r\n        delay: 500\r\n    });\r\n\r\n    const springSecond = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-110%)` },\r\n        from: { transform: `translateX(-110%)`, zIndex: 5 },\r\n        delay: 600\r\n    });\r\n\r\n    const videoSpringMobile = useSpring({\r\n        to: {\r\n            transform: props.render ? \"scale(1) translate(0%, 0%)\" : \"scale(0.6) translate(10% ,0%)\", opacity: props.render ? 1 : 0,\r\n            width: props.contentModalOpen ? \"66%\" : \"74%\"\r\n        },\r\n        from: { transform: \"scale(0.6) translate(10% ,0%)\", transformOrigin: \"top center 20px\", opacity: 0, width: \"54%\", zIndex: -1, marginLeft: \"9%\" },\r\n        config: { duration: props.contentModalOpen ? 600 : 1500, easing: easings.easePolyOut.exponent(2.04) },\r\n        delay: initialRender ? 600 : 0\r\n    });\r\n\r\n    const videoOverlay = useSpring({\r\n        to: { width: props.render ? \"0%\" : \"100%\" },\r\n        from: { height: \"100%\", width: \"100%\", background: \"linear-gradient(90deg, #ff4d5a 10%, #072142 20%)\", zIndex: 2, right: \"0\" },\r\n        config: { duration: 1000, easing: easings.easeQuadOut },\r\n        delay: 400\r\n    });\r\n\r\n    const springThird = useSpring({\r\n        to: { transform: props.render ? `translateX(0%)` : `translateX(-100%)`, opacity: props.render ? 1 : 0, right: props.contentModalOpen ? \"3%\" : \"-6.6%\" },\r\n        from: { right: \"-6.6%\", zIndex: 5, bottom: \"8%\", position: \"absolute\", transform: `translateX(-100%)`, opacity: 0 },\r\n        delay: props.modalOpen ? 0 : 600\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ overflow: \"hidden\", display: \"flex\", flexDirection: \"column\", marginLeft: \"15%\", justifyContent: \"space-around\", height: \"70%\", alignItems: \"flex-start\" }}>\r\n            <div>\r\n                <animated.div style={springFirst}>\r\n                    <Typography style={{\r\n                        color: \"white\", fontFamily: \"FuturaM\", fontSize: props.content.title === 'Get In Touch' ? \"calc(32px + (44 - 32) * ((100vw - 300px) / (1200 - 300)))\" :  \"calc(38px + (50 - 38) * ((100vw - 300px) / (1200 - 300)))\",\r\n                        letterSpacing: \"0.2rem\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.3)\", fontWeight: \"bold\"\r\n                    }}>\r\n                        {props.content.title}\r\n                    </Typography>\r\n                </animated.div>\r\n                <div style={{ overflow: \"hidden\", marginTop: \"1%\" }}>\r\n                    <animated.div style={springLine}>\r\n                        <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"0.5rem\", marginTop: \"0.7rem\" }} />\r\n                    </animated.div>\r\n                    <animated.div style={{ ...springLineMove, marginLeft: \"3.3rem\" }}>\r\n                        <Divider style={{ height: \"5px\", background: \"#ff4d5a\", borderRadius: \"4px\", marginBottom: \"1.2rem\", marginTop: \"0.7rem\" }} />\r\n                    </animated.div>\r\n                </div>\r\n            </div>\r\n            <animated.div style={{ ...videoSpringMobile, boxShadow: \"rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px\" }}>\r\n                <animated.div style={{ ...videoOverlay, position: \"absolute\" }} />\r\n                <img src={props.pic} style={{ height: \"auto\", width: \"100%\", borderRadius: \"2px\" }} />\r\n                <animated.div style={springThird}>\r\n                    <Typography style={{\r\n                        width: \"max-content\", color: \"white\", fontFamily: \"'Abril Fatface', cursive\", fontSize: \"calc(38px + (50 - 38) * ((100vw - 300px) / (1200 - 300)))\", textShadow: \"0 10px 30px rgb(2 11 22 / 50%)\"\r\n                    }}>\r\n                        {props.content.number}\r\n                    </Typography>\r\n                </animated.div>\r\n            </animated.div>\r\n            <div>\r\n                <animated.div style={springSecond}>\r\n                    <Typography style={{\r\n                        width: \"max-content\", color: \"white\", fontFamily: \"FuturaB\", fontSize: \"calc(18px + (32 - 18) * ((100vw - 300px) / (1200 - 300)))\", letterSpacing: \"0.2rem\",\r\n                        marginTop: \"4px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                    }}>\r\n                        {props.content.subtitle}\r\n                    </Typography>\r\n                </animated.div>\r\n                <animated.div style={springSecond}>\r\n                    <Typography style={{\r\n                        width: \"max-content\", color: \"rgba(255,255,255,0.7)\", fontFamily: \"FuturaM\", fontSize: \"calc(13px + (22 - 13) * ((100vw - 300px) / (1200 - 300)))\",\r\n                        letterSpacing: \"1.5px\", textShadow: \"0 10px 30px rgba(2, 11, 22, 0.5)\"\r\n                    }}>\r\n                        {props.content.description}\r\n                    </Typography>\r\n                </animated.div>\r\n                <animated.div style={{...springSecond, display: props.content.title === 'Get In Touch' ? \"none\" : \"\"}}>\r\n                    <button onClick={() => props.handleClick()} className=\"explore\"\r\n                        style={{ fontFamily: \"FuturaB\", boxShadow: \"rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px\", marginTop: \"8%\" }}>More\r\n        <span className=\"icon-right-more\"></span><span className=\"icon-right-more after\"></span></button>\r\n                </animated.div>\r\n            </div>\r\n        </animated.div>\r\n    )\r\n}\r\n\r\nexport default MobileContent;","D:\\Storage\\portfolio\\src\\Components\\AboutMe.js",[],"D:\\Storage\\portfolio\\src\\Redux\\actions\\propertyAction.js",[],"D:\\Storage\\portfolio\\src\\Components\\Bars.js",["119","120","121","122"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { useSpring, useChain, useTrail, animated, useTransition, config } from 'react-spring';\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nconst ExpereinceBar = (props) => {\r\n    // props i need, 1. theme  2. name 3. experience in %\r\n    // specs 531x28 total and 110x28 for name field, adjust accordingly \r\n    const matches = useMediaQuery('(min-width:1200px)', { noSsr: true });\r\n\r\n    const show = props.render;\r\n    const delay = props.delay;\r\n    const barLength = matches ? (props.percentage) / 10 * 42 : (props.percentage) / 100 * (window.innerWidth * 0.45);\r\n    const perc = props.percentage;\r\n\r\n    const transitions = useTransition(show, null, {\r\n        from: { position: 'absolute', opacity: 0, minWidth: \"0px\" },\r\n        enter: item => async (next, cancel) => {\r\n            await new Promise(resolve => setTimeout(resolve, delay));\r\n            await next({ opacity: 1, minWidth: `${barLength}px` })\r\n        },\r\n        leave: { opacity: 0, minWidth: \"0px\" },\r\n        config: { mass: 1, tension: 170, friction: 26 }\r\n    })\r\n\r\n    const transPerc = useTransition(show, null, {\r\n        from: { position: 'absolute', },\r\n        enter: { opacity: 1, },\r\n        leave: { opacity: 0, },\r\n    })\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {matches ?\r\n                <div style={{ minWidth: \"565px\", height: \"28px\", display: \"flex\", marginBottom: \"1rem\", boxShadow: \"rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px\" }}>\r\n                    <div style={{ minWidth: \"110px\", height: \"28px\", backgroundColor: \"rgba(7, 33, 66, 0.9)\", borderRadius: \"2px\" }}>\r\n                        <Typography align=\"center\" style={{ fontFamily: \"FuturaM\", letterSpacing: \"1px\", paddingTop: \"3px\", color: \"white\", fontWeight: \"500\" }} >\r\n                            {props.name}\r\n                        </Typography>\r\n                    </div>\r\n                    {transitions.map(({ item, key, props }) =>\r\n                        item && <animated.div key={key} style={{ ...props, backgroundColor: \"rgba(7, 73, 115,0.7)\", height: \"28px\", marginLeft: \"110px\", zIndex: \"1\", borderRadius: \"2px\" }}></animated.div>\r\n                    )}\r\n                    {transPerc.map(({ item, key, props }) =>\r\n                        item && <animated.div key={key} style={{ ...props, backgroundColor: \"rgb(235,235,235)\", height: \"28px\", marginLeft: \"110px\", minWidth: \"451px\", paddingRight: \"8px\", borderRadius: \"2px\" }}>\r\n                            <Typography variant=\"body1\" align=\"right\" style={{ fontFamily: \"FuturaM\", paddingTop: \"3px\", fontWeight: \"500\", letterSpacing: \"1px\" }} >\r\n                                {perc === 90 ? \"Expert\" : perc === 67.5 ? \"Advanced\" : perc === 45 ? \"Intermediate\" : \"Novice\"}\r\n                            </Typography>\r\n                        </animated.div>\r\n                    )}\r\n                </div>\r\n                :\r\n                <div style={{\r\n                    minWidth: \"85vw\", height: \"28px\", display: \"flex\", marginBottom: \"1rem\", boxShadow: \"rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px\",\r\n                    backgroundColor: \"rgb(235,235,235)\"\r\n                }}>\r\n                    <div style={{ minWidth: \"110px\", height: \"28px\", backgroundColor: \"rgba(7, 33, 66, 0.9)\", borderRadius: \"2px\" }}>\r\n                        <Typography align=\"center\" style={{ fontFamily: \"FuturaM\", letterSpacing: \"1px\", paddingTop: \"3px\", color: \"white\", fontWeight: \"500\" }} >\r\n                            {props.name}\r\n                        </Typography>\r\n                    </div>\r\n                    {transitions.map(({ item, key, props }) =>\r\n                        item && <animated.div key={key} style={{ ...props, backgroundColor: \"rgba(7, 73, 115,0.7)\", height: \"28px\", marginLeft: \"110px\", zIndex: \"1\", borderRadius: \"2px\" }}></animated.div>\r\n                    )}\r\n                    {transPerc.map(({ item, key, props }) =>\r\n                        item && <animated.div key={key} style={{ ...props, backgroundColor: \"rgb(235,235,235)\", height: \"28px\", marginLeft: \"110px\", minWidth: \"calc(85vw - 110px)\", paddingRight: \"8px\", borderRadius: \"2px\" }}>\r\n                            <Typography variant=\"body1\" align=\"right\" style={{ fontFamily: \"FuturaM\", paddingTop: \"3px\", fontWeight: \"500\", letterSpacing: \"1px\" }} >\r\n                                {perc === 90 ? \"Expert\" : perc === 67.5 ? \"Advanced\" : perc === 45 ? \"Intermediate\" : \"Novice\"}\r\n                            </Typography>\r\n                        </animated.div>\r\n                    )}\r\n                </div>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default React.memo(ExpereinceBar)","D:\\Storage\\portfolio\\src\\Components\\WorkValues.js",[],"D:\\Storage\\portfolio\\src\\Sections\\MyHealthy.js",["123","124"],"D:\\Storage\\portfolio\\src\\Assets\\constants.js",["125","126","127"],"export const preaboutcode = [\r\n    { indent: 0, content: ` ` },\r\n    { indent: 0, content: `importPic` },\r\n    { indent: 0, content: `import * as easings from 'd3-ease';` },\r\n    { indent: 0, content: ` ` },\r\n]\r\n\r\nexport const precode = [\r\n    { indent: 0, content: ` ` },\r\n    { indent: 0, content: \"const trans1 = (x, y) => translate3d(${x / 50}px,${y / 50}px,0);\" },\r\n    { indent: 0, content: \"const trans2 = (x, y) => translate3d(${x / 8 + 35}px,${y / 8 - 130}px,0);\" },\r\n    { indent: 0, content: \"const trans3 = (x, y) => translate3d(${x / 6 - 20}px,${y / 6 - 90}px,0);\" },\r\n    { indent: 0, content: ` ` },\r\n]\r\n\r\nexport const code = [\r\n    { indent: 0, content: ` ` },\r\n    { indent: 2, content: `carouselState` },\r\n    { indent: 2, content: `const [prop, set] = useSpring(() => (` },\r\n    { indent: 3, content: `xyConfig` },\r\n    { indent: 2, content: `);` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 2, content: `React.useEffect(() => {` },\r\n    { indent: 3, content: `const timer = setTimeout(() => {` },\r\n    { indent: 4, content: `setCarouselIndex` },\r\n    { indent: 3, content: `}, 4000);` },\r\n    { indent: 3, content: `return () => clearTimeout(timer);` },\r\n    { indent: 2, content: `}, [carouselIndex, setCarouselIndex]);` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 2, content: `return ( ` },\r\n    { indent: 3, content: `<div onMouseMove={({ clientX: x, clientY: y }) => set({ xy: calc(x, y) })}>` },\r\n    { indent: 4, content: `<animated.div style={carouselSprings}>` },\r\n    { indent: 5, content: `trans1` },\r\n    { indent: 4, content: `</animated.div>` },\r\n    { indent: 4, content: `<animated.div style={carouselSprings}>` },\r\n    { indent: 5, content: `trans2` },\r\n    { indent: 4, content: `</animated.div>` },\r\n    { indent: 4, content: `<animated.div style={carouselSprings}>` },\r\n    { indent: 5, content: `trans3` },\r\n    { indent: 4, content: `</animated.div>` },\r\n    { indent: 3, content: `</div>` },\r\n    { indent: 2, content: `)` },\r\n    { indent: 1, content: `}` },\r\n    { indent: 0, content: ` ` },\r\n]\r\n\r\nexport const preexpcode = [\r\n    { indent: 0, content: `import HoverVideoPlayer from 'react-hover-video-player';` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 0, content: `import expconVid from '../Assets/videos/expcon_demo.mov';` },\r\n    { indent: 0, content: `import pauseVideo from '../Assets/videos/expcon_demo_edit.png;` },\r\n    { indent: 0, content: ` ` },\r\n]\r\n\r\nexport const expcode = [\r\n    { indent: 0, content: ` ` },\r\n    { indent: 2, content: `const videoSpring = useSpring({` },\r\n    { indent: 3, content: `to: { transform: props.render ? \"scale(1) translate(0%, -50%)\" :` },\r\n    { indent: 4, content: `\"scale(0.7) translate(10% ,-50%)\", opacity: props.render ? 1 : 0 },` },\r\n    { indent: 3, content: `from: { right: \"8%\", top: \"50%\", transform: \"scale(0.6) translate(10% ,-50%)\",` },\r\n    { indent: 4, content: `transformOrigin: \"top center 20px\", opacity: 0 },` },\r\n    { indent: 3, content: `config: { duration: 1200, easing: easings.easeQuadOut },` },\r\n    { indent: 3, content: `delay: 400` },\r\n    { indent: 2, content: `})` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 2, content: `return (` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 3, content: `<animated.div style={{ overflow: \"hidden\", display: \"flex\", height: \"100%\">` },\r\n    { indent: 4, content: `expcon` },\r\n    { indent: 4, content: `website` },\r\n    { indent: 4, content: `skills` },\r\n    { indent: 4, content: `<button className=\"exploreBtn\">Explore</button>` },\r\n    { indent: 3, content: `</aniamted.div>` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 3, content: `<animated.div style={videoSpring}>` },\r\n    { indent: 4, content: `<animated.div style={videoOverlay} />` },\r\n    { indent: 4, content: `<HoverVideoPlayer` },\r\n    { indent: 5, content: `videoSrc={expconVid}` },\r\n    { indent: 5, content: `pausedOverlay={<img src={pauseVideo}` },\r\n    { indent: 4, content: `/>` },\r\n    { indent: 3, content: `</aniamted.div>` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 2, content: `)` },\r\n    { indent: 1, content: `}` },\r\n]\r\n\r\nexport const aboutCode = [\r\n    { indent: 0, content: ` ` },\r\n    { indent: 2, content: `const imageSpring = useSpring({` },\r\n    { indent: 3, content: `to: { transform: props.render ? \"scale(1) translate(0%, -50%)\" :` },\r\n    { indent: 4, content: `\"scale(0.7) translate(10% ,-50%)\", opacity: props.render ? 1 : 0 },` },\r\n    { indent: 3, content: `from: { right: \"8%\", top: \"50%\", transform: \"scale(0.6) translate(10% ,-50%)\",` },\r\n    { indent: 4, content: `transformOrigin: \"top center 20px\", opacity: 0 },` },\r\n    { indent: 3, content: `config: { duration: 1200, easing: easings.easeQuadOut },` },\r\n    { indent: 3, content: `delay: 400` },\r\n    { indent: 2, content: `})` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 2, content: `return (` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 3, content: `<animated.div style={{ overflow: \"hidden\", display: \"flex\", height: \"100%\">` },\r\n    { indent: 4, content: `about` },\r\n    { indent: 4, content: `developer` },\r\n    { indent: 4, content: `uoft` },\r\n    { indent: 4, content: `<button className=\"moreBtn\">More</button>` },\r\n    { indent: 3, content: `</aniamted.div>` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 3, content: `<animated.div style={imageSpring}>` },\r\n    { indent: 4, content: `<animated.div style={videoOverlay} />` },\r\n    { indent: 4, content: `<img src={aboutPic} style={{height: \"100%\", width: \"100%\", borderRadius: \"2px\"}} />` },\r\n    { indent: 4, content: `<Typography style={{ fontFamily: \"'Abril Fatface', cursive\", fontSize: \"7rem\" }}>` },\r\n    { indent: 5, content: `02` },\r\n    { indent: 4, content: `</Typography>` },\r\n    { indent: 4, content: `/>` },\r\n    { indent: 3, content: `</aniamted.div>` },\r\n    { indent: 0, content: ` ` },\r\n    { indent: 2, content: `)` },\r\n    { indent: 1, content: `}` },\r\n]\r\n\r\nexport const codeSections = [\r\n    { content: `PortfolioLandingPage` },\r\n    { content: `AboutSection` },\r\n    { content: `MyHealthyFamilySection` },\r\n    { content: `ExpconSection` },\r\n    { content: `UAssistSection` },\r\n    { content: `ContactSection` },\r\n]",{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":122,"column":33,"nodeType":"134","endLine":123,"endColumn":266},{"ruleId":"132","severity":1,"message":"133","line":147,"column":29,"nodeType":"134","endLine":147,"endColumn":267},{"ruleId":"132","severity":1,"message":"133","line":183,"column":37,"nodeType":"134","endLine":183,"endColumn":227},{"ruleId":"132","severity":1,"message":"133","line":184,"column":37,"nodeType":"134","endLine":184,"endColumn":236},{"ruleId":"132","severity":1,"message":"133","line":230,"column":29,"nodeType":"134","endLine":233,"endColumn":34},{"ruleId":"132","severity":1,"message":"133","line":297,"column":25,"nodeType":"134","endLine":297,"endColumn":199},{"ruleId":"132","severity":1,"message":"133","line":334,"column":37,"nodeType":"134","endLine":334,"endColumn":228},{"ruleId":"132","severity":1,"message":"133","line":335,"column":37,"nodeType":"134","endLine":335,"endColumn":237},{"ruleId":"135","severity":1,"message":"136","line":5,"column":10,"nodeType":"137","messageId":"138","endLine":5,"endColumn":18},{"ruleId":"135","severity":1,"message":"139","line":5,"column":20,"nodeType":"137","messageId":"138","endLine":5,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":200,"column":25,"nodeType":"134","endLine":200,"endColumn":159},{"ruleId":"132","severity":1,"message":"133","line":202,"column":29,"nodeType":"134","endLine":202,"endColumn":157},{"ruleId":"132","severity":1,"message":"133","line":122,"column":25,"nodeType":"134","endLine":122,"endColumn":135},{"ruleId":"135","severity":1,"message":"140","line":6,"column":31,"nodeType":"137","messageId":"138","endLine":6,"endColumn":37},{"ruleId":"135","severity":1,"message":"141","line":6,"column":39,"nodeType":"137","messageId":"138","endLine":6,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":173,"column":29,"nodeType":"134","endLine":173,"endColumn":114},{"ruleId":"135","severity":1,"message":"142","line":32,"column":7,"nodeType":"137","messageId":"138","endLine":32,"endColumn":13},{"ruleId":"135","severity":1,"message":"143","line":66,"column":19,"nodeType":"137","messageId":"138","endLine":66,"endColumn":26},{"ruleId":"144","severity":1,"message":"145","line":152,"column":8,"nodeType":"146","endLine":152,"endColumn":25,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":176,"column":41,"nodeType":"150","messageId":"151","endLine":176,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":94,"column":17,"nodeType":"134","endLine":94,"endColumn":103},{"ruleId":"135","severity":1,"message":"139","line":5,"column":10,"nodeType":"137","messageId":"138","endLine":5,"endColumn":19},{"ruleId":"135","severity":1,"message":"152","line":5,"column":21,"nodeType":"137","messageId":"138","endLine":5,"endColumn":29},{"ruleId":"135","severity":1,"message":"153","line":5,"column":31,"nodeType":"137","messageId":"138","endLine":5,"endColumn":39},{"ruleId":"135","severity":1,"message":"140","line":5,"column":66,"nodeType":"137","messageId":"138","endLine":5,"endColumn":72},{"ruleId":"135","severity":1,"message":"140","line":6,"column":31,"nodeType":"137","messageId":"138","endLine":6,"endColumn":37},{"ruleId":"135","severity":1,"message":"141","line":6,"column":39,"nodeType":"137","messageId":"138","endLine":6,"endColumn":49},{"ruleId":"154","severity":1,"message":"155","line":10,"column":27,"nodeType":"156","messageId":"157","endLine":10,"endColumn":93},{"ruleId":"154","severity":1,"message":"155","line":11,"column":27,"nodeType":"156","messageId":"157","endLine":11,"endColumn":102},{"ruleId":"154","severity":1,"message":"155","line":12,"column":27,"nodeType":"156","messageId":"157","endLine":12,"endColumn":101},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'animated' is defined but never used.","Identifier","unusedVar","'useSpring' is defined but never used.","'config' is defined but never used.","'useSprings' is defined but never used.","'trans4' is assigned a value but never used.","'onHover' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'appliactionDev', 'appliactionDevCode', 'browserVivus', 'coderCurlyBlinkVivus', 'coderCurlyVivus', 'webDesignArrowVivus', 'webDesignSunContainerVivus', 'webDesignSunVivus', 'webDesignTxtVivus', and 'webDesignVivus'. Either include them or remove the dependency array.","ArrayExpression",["160"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useChain' is defined but never used.","'useTrail' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},"Update the dependencies array to be: [appliactionDev, appliactionDevCode, browserVivus, coderCurlyBlinkVivus, coderCurlyVivus, props.svgRender, webDesignArrowVivus, webDesignSunContainerVivus, webDesignSunVivus, webDesignTxtVivus, webDesignVivus]",{"range":"163","text":"164"},[7851,7868],"[appliactionDev, appliactionDevCode, browserVivus, coderCurlyBlinkVivus, coderCurlyVivus, props.svgRender, webDesignArrowVivus, webDesignSunContainerVivus, webDesignSunVivus, webDesignTxtVivus, webDesignVivus]"]